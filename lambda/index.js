"use strict";
require('isomorphic-fetch');
const AWSAppSyncClient = require('aws-appsync').default;
const gql = require('graphql-tag');
// クエリ
const query = gql(`mutation createData($value: Float!, $datetime: AWSDateTime!) {
  createData(value: $value, datetime: $datetime) {
    id
    datetime
    value
  }
}`);
exports.handler = async (event) => {
    // event = {
    //   "value": 23.5,
    //   "datetime": 1578879458040
    // }
    console.log(JSON.stringify(event));
    const url = 'https://72d7ttxlm5ambpmfhaprhzecde.appsync-api.ap-northeast-1.amazonaws.com/graphql';
    const region = 'ap-northeast-1';
    const authType = 'API_KEY';
    const apiKey = 'da2-ez56n3x2mrg4hehccxkgq6aghy';
    const client = new AWSAppSyncClient({
        url: url,
        region: region,
        auth: {
            type: authType,
            apiKey: apiKey
        },
        disableOffline: true,
        fetchPolicy: 'network-only'
    });
    if (event.value && event.datetime) {
        const dt = new Date(event.datetime);
        const params = {
            "datetime": dt.toISOString(),
            "value": parseFloat(event.value) // => 2011-10-05T14:48:00.000Z
        };
        try {
            const result = await client.mutate({
                variables: params,
                mutation: query
            });
            console.log(JSON.stringify(result));
            return result;
        }
        catch (err) {
            console.log(JSON.stringify(err));
            return err;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDNUIsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUVuQyxNQUFNO0FBQ04sTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDOzs7Ozs7RUFNaEIsQ0FBQyxDQUFDO0FBR0osT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFFckMsWUFBWTtJQUNaLG1CQUFtQjtJQUNuQiw4QkFBOEI7SUFDOUIsSUFBSTtJQUVKLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRW5DLE1BQU0sR0FBRyxHQUFHLHFGQUFxRixDQUFDO0lBQ2xHLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDO0lBQ2hDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUMzQixNQUFNLE1BQU0sR0FBRyxnQ0FBZ0MsQ0FBQztJQUVoRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFnQixDQUFDO1FBQ2xDLEdBQUcsRUFBRSxHQUFHO1FBQ1IsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsUUFBUTtZQUNkLE1BQU0sRUFBRSxNQUFNO1NBQ2Y7UUFDRCxjQUFjLEVBQUUsSUFBSTtRQUNwQixXQUFXLEVBQUUsY0FBYztLQUM1QixDQUFDLENBQUM7SUFFSCxJQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBQztRQUMvQixNQUFNLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsTUFBTSxNQUFNLEdBQUk7WUFDZCxVQUFVLEVBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUM1QixPQUFPLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyw4QkFBOEI7U0FDaEUsQ0FBQTtRQUNELElBQUk7WUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2pDLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixRQUFRLEVBQUUsS0FBSzthQUNoQixDQUFDLENBQUM7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwQyxPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNqQyxPQUFPLEdBQUcsQ0FBQztTQUNaO0tBQ0Y7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdpc29tb3JwaGljLWZldGNoJyk7XG5jb25zdCBBV1NBcHBTeW5jQ2xpZW50ID0gcmVxdWlyZSgnYXdzLWFwcHN5bmMnKS5kZWZhdWx0O1xuY29uc3QgZ3FsID0gcmVxdWlyZSgnZ3JhcGhxbC10YWcnKTtcblxuLy8g44Kv44Ko44OqXG5jb25zdCBxdWVyeSA9IGdxbChgbXV0YXRpb24gY3JlYXRlRGF0YSgkdmFsdWU6IEZsb2F0ISwgJGRhdGV0aW1lOiBBV1NEYXRlVGltZSEpIHtcbiAgY3JlYXRlRGF0YSh2YWx1ZTogJHZhbHVlLCBkYXRldGltZTogJGRhdGV0aW1lKSB7XG4gICAgaWRcbiAgICBkYXRldGltZVxuICAgIHZhbHVlXG4gIH1cbn1gKTtcbiBcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcbiAgXG4gIC8vIGV2ZW50ID0ge1xuICAvLyAgIFwidmFsdWVcIjogMjMuNSxcbiAgLy8gICBcImRhdGV0aW1lXCI6IDE1Nzg4Nzk0NTgwNDBcbiAgLy8gfVxuXG4gIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG5cbiAgY29uc3QgdXJsID0gJ2h0dHBzOi8vNzJkN3R0eGxtNWFtYnBtZmhhcHJoemVjZGUuYXBwc3luYy1hcGkuYXAtbm9ydGhlYXN0LTEuYW1hem9uYXdzLmNvbS9ncmFwaHFsJztcbiAgY29uc3QgcmVnaW9uID0gJ2FwLW5vcnRoZWFzdC0xJztcbiAgY29uc3QgYXV0aFR5cGUgPSAnQVBJX0tFWSc7XG4gIGNvbnN0IGFwaUtleSA9ICdkYTItZXo1Nm4zeDJtcmc0aGVoY2N4a2dxNmFnaHknO1xuXG4gIGNvbnN0IGNsaWVudCA9IG5ldyBBV1NBcHBTeW5jQ2xpZW50KHtcbiAgICB1cmw6IHVybCxcbiAgICByZWdpb246IHJlZ2lvbixcbiAgICBhdXRoOiB7XG4gICAgICB0eXBlOiBhdXRoVHlwZSxcbiAgICAgIGFwaUtleTogYXBpS2V5XG4gICAgfSxcbiAgICBkaXNhYmxlT2ZmbGluZTogdHJ1ZSxcbiAgICBmZXRjaFBvbGljeTogJ25ldHdvcmstb25seSdcbiAgfSk7XG5cbiAgaWYoZXZlbnQudmFsdWUgJiYgZXZlbnQuZGF0ZXRpbWUpe1xuICAgIGNvbnN0IGR0ID0gbmV3IERhdGUoZXZlbnQuZGF0ZXRpbWUpO1xuICAgIGNvbnN0IHBhcmFtcyA9ICB7XG4gICAgICBcImRhdGV0aW1lXCI6IGR0LnRvSVNPU3RyaW5nKCksXG4gICAgICBcInZhbHVlXCI6IHBhcnNlRmxvYXQoZXZlbnQudmFsdWUpIC8vID0+IDIwMTEtMTAtMDVUMTQ6NDg6MDAuMDAwWlxuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2xpZW50Lm11dGF0ZSh7XG4gICAgICAgIHZhcmlhYmxlczogcGFyYW1zLFxuICAgICAgICBtdXRhdGlvbjogcXVlcnlcbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgfVxufVxuXG4iXX0=